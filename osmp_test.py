import OSMParser as osmp
import random
import overpy
from pprint import pprint
import lzma
import pickle
import requests

api = overpy.Overpass()

with open("gps_coords.txt", "r") as f:
    amount = int(f.readline())
    coordinates = [None] * amount
    for i in range(amount):
        coordinates[i] = list(map(float, f.readline().split(';')))
    
for c in coordinates:
    c.reverse()

#print(coordinates)

left = min(map(lambda x: x[0], coordinates))
right = max(map(lambda x: x[0], coordinates))
top = max(map(lambda x: x[1], coordinates))
bottom = min(map(lambda x: x[1], coordinates))

nums = [left, bottom, right, top]
print("Nums: {}".format(nums))

#osm_stuff = rec_try([])

const = 0.1
#osm = osmp.download_osm(left, bottom, right, top)
# query_str = """
#     way({},{},{},{}) ["highway"];
#     (._;>;);
#     out body;
#     """.format(left - const, bottom - const, right + const, top + const)

# query_str = '''node['highways']({:.3f},{:.3f},{:.3f},{:.3f});
#     out body;'''.format(left,
#         bottom, right, top)
#print(query_str)
query_str = '''/*
    This has been generated by the overpass-turbo wizard.
    The original search was:
    “highway=*”
    */
    [out:json][timeout:25];
    // gather results
    (
    // query part for: “highway=*”
        node["highway"]({0},{1},{2},{3});
        way["highway"]({0},{1},{2},{3});
        relation["highway"]({0},{1},{2},{3});
    );
    out body;'''.format(left,
        bottom, right, top)

# query_str = '''<osm-script output="json">
#         <query type="way">
#         <has-kv k="highway" v="motorway"/>
#         <bbox-query ({0},{1},{2},{3})/>
#         </query>
#     <print mode="body"/>
#     <recurse type="down"/>
#     <print mode="skeleton"/>
#     </osm-script>'''.format(left,
#         bottom, right, top)
print("Getting result...")
print(query_str)
result = api.query(query_str)
print("Got result")

way_nodes = []
ways_len = len(result.ways)
for w_i in range(ways_len):
    print("Solving way {} from {}".format(w_i, ways_len))
    way = result.ways[w_i]
    for node in way.get_nodes(resolve_missing=True):
        way_nodes.append(node)